using Simulation.Core.Actions;
using Simulation.Core.Primitives;
using Simulation.Core.Simulation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Simulation.Core.Components
{
    /// <summary>
    /// Интерфейс, который должны реализовать классы, который могуь быть 
    /// использованы как компоненты имитации
    /// </summary>
    public interface IComponent : ILinkedNode
    {
        /// <summary>
        /// Метод обратного вызова, вызываемый в момент начала 
        /// обслуживающего действия (сразу после извлечения из очереди)
        /// </summary>
        Action<IAction> OnActionStartingEvent
        {
            get;
        }

        /// <summary>
        /// Метод обратного вызова, вызываемый в момент окончания 
        /// обслуживающего действия
        /// </summary>
        Action<IAction> OnActionFinishedEvent
        {
            get;
        }

        ///// <summary>
        ///// Событийный метод, вызываемый после успешной вставки ячейки в список
        ///// </summary>
        //NodeEventProc OnEnteredNode
        //{
        //    get;
        //}

        ///// <summary>
        ///// Событийный метод, вызываемый после неудачной попытки вставки ячейки
        ///// в список по причине переполнения списка
        ///// </summary>
        //NodeEventProc OnNodeEnterFailed
        //{
        //    get;
        //}

        ///// <summary>
        ///// Событийный метод, вызываемый после исключения ячейки из списка
        ///// </summary>
        //NodeEventProc OnReleased
        //{
        //    get;
        //}

        /// <summary>
        /// Ссылка на родительскую имитацию
        /// </summary>
        IMainSimulation Parent
        {
            get;
            set;
        }

        /// <summary>
        /// Время создания объекта. Устанавливается автоматически в конструкторе. 
        /// При необходимости впоследствии может быть изменено.
        /// </summary>
        double StartingTime
        {
            get;
            set;
        }

        /// <summary>
        /// Время, оставшееся до завершения действия. Используется в двух ситуациях:
        /// <para>1. Перехват ресурса у объекта, выполняющего действие. 
        /// В этом случае в данное поле помещается время, оставшееся 
        /// до выполнения действия.</para>
        /// <para>2. Постановка объекта в очередь для выполнения над ним обслуживающего 
        /// действия. В этом случае в данное поле помещается планируемая продолжительность 
        /// действия.</para>
        /// <para>В остальных ситуациях это поле содержит значение 0, 
        /// на основании которого можно сделать вывод о наличии одной из 
        /// описанных ситуаций.</para>
        /// </summary>
        double TimeLeft
        {
            get;
            set;
        }

        /// <summary>
        /// Индекс списка, в который помещается компонент в случае если объект-очередь
        /// имеет несколько списков. Он должен принимать значение от 0 до 
        /// максимального индекса списка, в противном случае порождается исключение.
        /// Если очередь имеет один список, это свойство не принимается во внимание.
        /// </summary>
        int QueueIndex
        {
            get;
            set;
        }

        /// <summary>
        /// Извлечение процесса из текущей очереди и постановка его в список 
        /// свободных процессов. При работе с компонентами можно просто извлекать
        /// их из списка методом Remove(), однако объекты, работающие как с процессами,
        /// так и с компонентами, обращаются к данному методу.
        /// </summary>
        void StartRunning();
    }
}
