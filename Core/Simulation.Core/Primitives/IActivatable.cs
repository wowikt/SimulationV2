using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Simulation.Core.Primitives
{
    /// <summary>
    /// Интерфейс IActivatable является базовым для классов объектов, которые могут быть
    /// запланированы в календаре (процессы, событийные объекты)
    /// </summary>
    public interface IActivatable
    {
        /// <summary>
        /// Помещает запись уведомления об активации процесса непосредственно после текущего.
        /// <para>Если процесс находится в активном или приостановленном состоянии, ничего не делает</para>
        /// </summary>
        void Activate();

        /// <summary>
        /// Создает запись уведомления об активации процесса непосредственно после записи указанного процесса
        /// <para>Если процесс находится в активном или приостановленном состоянии, ничего не делает</para>
        /// <para>Если процесс-параметр находится в пассивном или завершенном состоянии, порождается исключение</para>
        /// </summary>
        /// <param name="act">Процесс, после которого следует активировать данный</param>
        void ActivateAfter(ISchedulable act);

        /// <summary>
        /// Создает запись уведомления об активации процесса в указанное время
        /// <para>Если процесс находится в активном или приостановленном состоянии, ничего не делает</para>
        /// </summary>
        /// <param name="t">Имитационное время активации процесса</param>
        void ActivateAt(double t);

        /// <summary>
        /// Создает запись уведомления об активации процесса непосредственно перед записью указанного процесса
        /// <para>Если процесс находится в активном или приостановленном состоянии, ничего не делает</para>
        /// <para>Если процесс-параметр находится в пассивном или завершенном состоянии, порождается исключение</para>
        /// </summary>
        /// <param name="act">Процесс, перед которым следует активировать данный</param>
        void ActivateBefore(ISchedulable act);

        /// <summary>
        /// Создает запись уведомления об активации процесса с указанной задержкой времени
        /// <para>Если процесс находится в активном или приостановленном состоянии, ничего не делает</para>
        /// </summary>
        /// <param name="dt">Задержка относительно текущего имитационного времени</param>
        void ActivateDelay(double dt);

        /// <summary>
        /// Создает запись уведомления об активации процесса в указанное время с приоритетом по отношению к процессам,
        /// запланированным ранее на то же время
        /// <para>Если процесс находится в активном или приостановленном состоянии, ничего не делает</para>
        /// </summary>
        /// <param name="t">Имитационное время активации процесса</param>
        void ActivatePriorAt(double t);

        /// <summary>
        /// Создает запись уведомления об активации процесса с указанной задержкой времени с приоритетом по отношению к процессам,
        /// запланированным ранее на то же время
        /// <para>Если процесс находится в активном или приостановленном состоянии, ничего не делает</para>
        /// </summary>
        /// <param name="dt">Задержка относительно текущего имитационного времени</param>
        void ActivatePriorDelay(double dt);
    }
}
